
#include<stdio.h>
#include<stdlib.h>
#include"SqList.h"

bool InitList(SqList &L)
{
	L.elem =(int*)malloc(LISTINCREMENT*sizeof(int));
	if(!L.elem)
		return false;
	L.length = 0;
	L.listsize = LIST_INIT_SIZE;
	return true;
}
bool ListEmpty(SqList L)
{
	if(L.length == 0)
		return true;
	else
		return false;
}
bool ListInsert(SqList &L, int i, int e)
{
	int *p, *q;

	if(i < 1 || i > L.length + 1)
		return false;
	if(L.length >= L.listsize)
	{
		L.elem = (int *)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(int)); 
		//为什么是L.size + listincrement，而不是listincrement
		if(!L.elem)
			return false;
		L.listsize += LISTINCREMENT;
	}
	for(int j = L.length; j >= i; j--)
			L.elem[j] = L.elem[j - 1];//后移操作
	L.elem[i - 1] = e;
	L.length ++;
	return true;
}
bool ListDelete_Sq(SqList &L, int i, int &e)
{
	int *p;
	int *q;
	if((i < 1) || (i > L.length))
		return false;
	for(int j = i; j <= L.length - 1; j ++)
		L.elem[j - 1] = L.elem[j];
	L.length--;
	return true;
}
bool GetElem_Sq(SqList &L, int i, int &e)
{
	if((i < 1) || (i > L.length))
		return false;
	e = L.elem[i - 1];
	return true;
}
void PrintElem_Sq(SqList L)
{
	if(L.length == 0)
		printf("顺序表为空");
	for(int i = 0; i < L.length; i ++)
		printf("%d ", L.elem[i]);
	printf("\n");
}
